{
	"r": {
		"ns": [
			{
				"tp": 13,
				"ns": [],
				"id": 0,
				"ps": [
					1
				],
				"i": 0,
				"r": {
					"n": "Calculate",
					"action": "let f1 = facts.get('f1');let f2 = facts.get('f2');let f3 = facts.get('f3');let r = facts.get('r');const modify=(...args)=>{flow.modify(...args)};const retract=(...args)=>{flow.retract(...args)};f3.value = r.result = f1.value + f2.value; \t\tmodify(f3); \t\tretract(f1);",
					"p": 0,
					"g": null,
					"af": false
				},
				"n": "Calculate"
			},
			{
				"tp": 6,
				"ns": [
					[
						0,
						-1
					]
				],
				"id": 1,
				"ps": [
					5,
					6
				]
			},
			{
				"tp": 9,
				"ns": [
					[
						3,
						0
					]
				],
				"id": 2,
				"ps": [],
				"constraint": {
					"tp": 5,
					"a": "r",
					"cls": "Result"
				}
			},
			{
				"tp": 10,
				"ns": [
					[
						4,
						0
					]
				],
				"id": 3,
				"ps": [
					2
				],
				"alias": "r",
				"p": 0
			},
			{
				"tp": 11,
				"ns": [
					[
						5,
						0
					]
				],
				"id": 4,
				"ps": [
					3
				],
				"constraint": {
					"tp": 13,
					"a": "r"
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						1,
						0
					]
				],
				"id": 5,
				"ps": [
					4
				]
			},
			{
				"tp": 2,
				"ns": [
					[
						7,
						-1
					]
				],
				"id": 6,
				"ps": [
					11,
					12
				],
				"constraint": {
					"tp": 14,
					"ns": [],
					"id": 7,
					"ps": [],
					"constraint": {
						"options": {
							"alias": "f3",
							"pattern": "f3.value == -1 && f3.sequence == s2 + 1",
							"scope2": {}
						},
						"op": "eq",
						"tp": 7,
						"a": "f3",
						"constraint": [
							[
								[
									"f3",
									null,
									"identifier"
								],
								[
									"sequence",
									null,
									"identifier"
								],
								"prop"
							],
							[
								[
									"s2",
									null,
									"identifier"
								],
								[
									1,
									null,
									"number"
								],
								"plus"
							],
							"eq"
						],
						"vars": [
							"s2"
						]
					},
					"isDefault": false
				}
			},
			{
				"tp": 7,
				"ns": [
					[
						1,
						-1
					]
				],
				"id": 8,
				"ps": []
			},
			{
				"tp": 9,
				"ns": [
					[
						9,
						1
					],
					[
						14,
						2
					],
					[
						20,
						3
					],
					[
						30,
						5
					],
					[
						20,
						7
					],
					[
						30,
						8
					]
				],
				"id": 9,
				"ps": [],
				"constraint": {
					"tp": 5,
					"a": "f3",
					"cls": "Fibonacci"
				}
			},
			{
				"tp": 10,
				"ns": [
					[
						10,
						1
					]
				],
				"id": 10,
				"ps": [
					8
				],
				"alias": "f3",
				"p": 1
			},
			{
				"tp": 11,
				"ns": [
					[
						11,
						1
					]
				],
				"id": 11,
				"ps": [
					9
				],
				"constraint": {
					"options": {
						"alias": "f3",
						"pattern": "f3.value == -1 && f3.sequence == s2 + 1",
						"scope2": {}
					},
					"tp": 1,
					"a": "f3",
					"constraint": [
						[
							[
								"f3",
								null,
								"identifier"
							],
							[
								"value",
								null,
								"identifier"
							],
							"prop"
						],
						[
							-1,
							null,
							"number"
						],
						"eq"
					]
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						6,
						1
					]
				],
				"id": 12,
				"ps": [
					10
				]
			},
			{
				"tp": 2,
				"ns": [
					[
						13,
						-1
					]
				],
				"id": 13,
				"ps": [
					17,
					18
				],
				"constraint": {
					"tp": 14,
					"ns": [],
					"id": 14,
					"ps": [],
					"constraint": {
						"options": {
							"alias": "f2",
							"pattern": "f2.value != -1 && f2.sequence == s1 + 1",
							"scope2": {}
						},
						"op": "eq",
						"tp": 7,
						"a": "f2",
						"constraint": [
							[
								[
									"f2",
									null,
									"identifier"
								],
								[
									"sequence",
									null,
									"identifier"
								],
								"prop"
							],
							[
								[
									"s1",
									null,
									"identifier"
								],
								[
									1,
									null,
									"number"
								],
								"plus"
							],
							"eq"
						],
						"vars": [
							"s1"
						]
					},
					"isDefault": false
				}
			},
			{
				"tp": 7,
				"ns": [
					[
						6,
						-1
					]
				],
				"id": 15,
				"ps": []
			},
			{
				"tp": 10,
				"ns": [
					[
						15,
						2
					]
				],
				"id": 17,
				"ps": [
					8
				],
				"alias": "f2",
				"p": 2
			},
			{
				"tp": 11,
				"ns": [
					[
						16,
						2
					]
				],
				"id": 18,
				"ps": [
					14
				],
				"constraint": {
					"options": {
						"alias": "f2",
						"pattern": "f2.value != -1 && f2.sequence == s1 + 1",
						"scope2": {}
					},
					"tp": 4,
					"a": "f2",
					"constraint": [
						[
							[
								"f2",
								null,
								"identifier"
							],
							[
								"value",
								null,
								"identifier"
							],
							"prop"
						],
						[
							-1,
							null,
							"number"
						],
						"neq"
					]
				}
			},
			{
				"tp": 12,
				"ns": [
					[
						17,
						2
					]
				],
				"id": 19,
				"ps": [
					15
				],
				"constraint": {
					"tp": 3,
					"a": "f2",
					"constraint": {
						"sequence": "s2"
					}
				},
				"alias": "f2",
				"constiables": {
					"sequence": "s2"
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						12,
						2
					]
				],
				"id": 20,
				"ps": [
					16
				]
			},
			{
				"tp": 6,
				"ns": [
					[
						19,
						-1
					]
				],
				"id": 21,
				"ps": [
					23,
					27
				]
			},
			{
				"tp": 7,
				"ns": [
					[
						12,
						-1
					]
				],
				"id": 22,
				"ps": []
			},
			{
				"tp": 10,
				"ns": [
					[
						21,
						3
					],
					[
						37,
						7
					]
				],
				"id": 24,
				"ps": [
					8
				],
				"alias": "f1",
				"p": 3
			},
			{
				"tp": 11,
				"ns": [
					[
						22,
						3
					]
				],
				"id": 25,
				"ps": [
					20
				],
				"constraint": {
					"options": {
						"alias": "f1",
						"pattern": "f1.value != -1",
						"scope2": {}
					},
					"tp": 4,
					"a": "f1",
					"constraint": [
						[
							[
								"f1",
								null,
								"identifier"
							],
							[
								"value",
								null,
								"identifier"
							],
							"prop"
						],
						[
							-1,
							null,
							"number"
						],
						"neq"
					]
				}
			},
			{
				"tp": 12,
				"ns": [
					[
						23,
						3
					]
				],
				"id": 26,
				"ps": [
					21
				],
				"constraint": {
					"tp": 3,
					"a": "f1",
					"constraint": {
						"sequence": "s1"
					}
				},
				"alias": "f1",
				"constiables": {
					"sequence": "s1"
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						18,
						3
					]
				],
				"id": 27,
				"ps": [
					22
				]
			},
			{
				"tp": 9,
				"ns": [
					[
						25,
						4
					],
					[
						25,
						6
					],
					[
						25,
						9
					]
				],
				"id": 28,
				"ps": [],
				"constraint": {
					"tp": 5,
					"a": "__i__",
					"cls": "InitialFact"
				}
			},
			{
				"tp": 10,
				"ns": [
					[
						26,
						4
					],
					[
						26,
						6
					],
					[
						26,
						9
					]
				],
				"id": 29,
				"ps": [
					24
				],
				"alias": "__i__",
				"p": 4
			},
			{
				"tp": 11,
				"ns": [
					[
						27,
						4
					],
					[
						34,
						6
					],
					[
						43,
						9
					]
				],
				"id": 30,
				"ps": [
					25
				],
				"constraint": {
					"tp": 13,
					"a": "__i__"
				}
			},
			{
				"tp": 7,
				"ns": [
					[
						18,
						4
					]
				],
				"id": 31,
				"ps": [
					26
				]
			},
			{
				"tp": 13,
				"ns": [],
				"id": 32,
				"ps": [
					29
				],
				"i": 1,
				"r": {
					"n": "Bootstrap",
					"action": "let f = facts.get('f');const modify=(...args)=>{flow.modify(...args)};f.value = 1; \t\tmodify(f);",
					"p": 0,
					"g": null,
					"af": false
				},
				"n": "Bootstrap"
			},
			{
				"tp": 6,
				"ns": [
					[
						28,
						-1
					]
				],
				"id": 33,
				"ps": [
					33,
					34
				]
			},
			{
				"tp": 10,
				"ns": [
					[
						31,
						5
					],
					[
						41,
						8
					]
				],
				"id": 35,
				"ps": [
					8
				],
				"alias": "f",
				"p": 5
			},
			{
				"tp": 11,
				"ns": [
					[
						32,
						5
					]
				],
				"id": 36,
				"ps": [
					30
				],
				"constraint": {
					"options": {
						"alias": "f",
						"pattern": "f.value == -1 && (f.sequence == 1 || f.sequence == 2)",
						"scope2": {}
					},
					"tp": 1,
					"a": "f",
					"constraint": [
						[
							[
								"f",
								null,
								"identifier"
							],
							[
								"value",
								null,
								"identifier"
							],
							"prop"
						],
						[
							-1,
							null,
							"number"
						],
						"eq"
					]
				}
			},
			{
				"tp": 11,
				"ns": [
					[
						33,
						5
					]
				],
				"id": 37,
				"ps": [
					31
				],
				"constraint": {
					"options": {
						"alias": "f",
						"pattern": "f.value == -1 && (f.sequence == 1 || f.sequence == 2)",
						"scope2": {}
					},
					"tp": 0,
					"a": "f",
					"constraint": [
						[
							[
								[
									[
										"f",
										null,
										"identifier"
									],
									[
										"sequence",
										null,
										"identifier"
									],
									"prop"
								],
								[
									1,
									null,
									"number"
								],
								"eq"
							],
							[
								[
									[
										"f",
										null,
										"identifier"
									],
									[
										"sequence",
										null,
										"identifier"
									],
									"prop"
								],
								[
									2,
									null,
									"number"
								],
								"eq"
							],
							"or"
						],
						null,
						"composite"
					]
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						29,
						5
					]
				],
				"id": 38,
				"ps": [
					32
				]
			},
			{
				"tp": 7,
				"ns": [
					[
						29,
						6
					]
				],
				"id": 42,
				"ps": [
					26
				]
			},
			{
				"tp": 13,
				"ns": [],
				"id": 43,
				"ps": [
					36
				],
				"i": 2,
				"r": {
					"n": "Recurse",
					"action": "let f = facts.get('f');facts.has('f') && (f = facts.get('f'));let f1 = facts.get('f1');let Fibonacci = defined.get('Fibonacci');const assert=(...args)=>{flow.assert(...args)};assert(new Fibonacci(f1.sequence - 1));",
					"p": 0,
					"g": null,
					"af": false
				},
				"n": "Recurse"
			},
			{
				"tp": 6,
				"ns": [
					[
						35,
						-1
					]
				],
				"id": 44,
				"ps": [
					38,
					39
				]
			},
			{
				"tp": 11,
				"ns": [
					[
						38,
						7
					]
				],
				"id": 47,
				"ps": [
					20
				],
				"constraint": {
					"options": {
						"alias": "f1",
						"pattern": "f1.sequence != 1",
						"scope2": {}
					},
					"tp": 4,
					"a": "f1",
					"constraint": [
						[
							[
								"f1",
								null,
								"identifier"
							],
							[
								"sequence",
								null,
								"identifier"
							],
							"prop"
						],
						[
							1,
							null,
							"number"
						],
						"neq"
					]
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						36,
						7
					]
				],
				"id": 48,
				"ps": [
					37
				]
			},
			{
				"tp": 0,
				"ns": [
					[
						40,
						-1
					]
				],
				"id": 49,
				"ps": [
					42,
					43
				],
				"constraint": {
					"tp": 14,
					"ns": [],
					"id": 50,
					"ps": [],
					"constraint": {},
					"isDefault": true
				}
			},
			{
				"tp": 7,
				"ns": [
					[
						36,
						-1
					]
				],
				"id": 51,
				"ps": []
			},
			{
				"tp": 11,
				"ns": [
					[
						42,
						8
					]
				],
				"id": 54,
				"ps": [
					30
				],
				"constraint": {
					"options": {
						"alias": "f",
						"pattern": "f.sequence == 1",
						"scope2": {}
					},
					"tp": 1,
					"a": "f",
					"constraint": [
						[
							[
								"f",
								null,
								"identifier"
							],
							[
								"sequence",
								null,
								"identifier"
							],
							"prop"
						],
						[
							1,
							null,
							"number"
						],
						"eq"
					]
				}
			},
			{
				"tp": 8,
				"ns": [
					[
						39,
						8
					]
				],
				"id": 55,
				"ps": [
					41
				]
			},
			{
				"tp": 7,
				"ns": [
					[
						39,
						9
					]
				],
				"id": 59,
				"ps": [
					26
				]
			}
		],
		"ps": [
			{
				"tp": 1,
				"id": 4,
				"cls": "Result",
				"a": "r",
				"constraints": [
					{
						"tp": 5,
						"a": "r",
						"cls": "Result"
					},
					{
						"tp": 13,
						"a": "r"
					}
				]
			},
			{
				"tp": 1,
				"id": 3,
				"cls": "Fibonacci",
				"a": "f3",
				"constraints": [
					{
						"tp": 5,
						"a": "f3",
						"cls": "Fibonacci"
					},
					{
						"options": {
							"alias": "f3",
							"pattern": "f3.value == -1 && f3.sequence == s2 + 1",
							"scope2": {}
						},
						"tp": 1,
						"a": "f3",
						"constraint": [
							[
								[
									"f3",
									null,
									"identifier"
								],
								[
									"value",
									null,
									"identifier"
								],
								"prop"
							],
							[
								-1,
								null,
								"number"
							],
							"eq"
						]
					},
					{
						"options": {
							"alias": "f3",
							"pattern": "f3.value == -1 && f3.sequence == s2 + 1",
							"scope2": {}
						},
						"op": "eq",
						"tp": 7,
						"a": "f3",
						"constraint": [
							[
								[
									"f3",
									null,
									"identifier"
								],
								[
									"sequence",
									null,
									"identifier"
								],
								"prop"
							],
							[
								[
									"s2",
									null,
									"identifier"
								],
								[
									1,
									null,
									"number"
								],
								"plus"
							],
							"eq"
						],
						"vars": [
							"s2"
						]
					}
				]
			},
			{
				"tp": 1,
				"id": 2,
				"cls": "Fibonacci",
				"a": "f2",
				"constraints": [
					{
						"tp": 5,
						"a": "f2",
						"cls": "Fibonacci"
					},
					{
						"options": {
							"alias": "f2",
							"pattern": "f2.value != -1 && f2.sequence == s1 + 1",
							"scope2": {}
						},
						"tp": 4,
						"a": "f2",
						"constraint": [
							[
								[
									"f2",
									null,
									"identifier"
								],
								[
									"value",
									null,
									"identifier"
								],
								"prop"
							],
							[
								-1,
								null,
								"number"
							],
							"neq"
						]
					},
					{
						"options": {
							"alias": "f2",
							"pattern": "f2.value != -1 && f2.sequence == s1 + 1",
							"scope2": {}
						},
						"op": "eq",
						"tp": 7,
						"a": "f2",
						"constraint": [
							[
								[
									"f2",
									null,
									"identifier"
								],
								[
									"sequence",
									null,
									"identifier"
								],
								"prop"
							],
							[
								[
									"s1",
									null,
									"identifier"
								],
								[
									1,
									null,
									"number"
								],
								"plus"
							],
							"eq"
						],
						"vars": [
							"s1"
						]
					},
					{
						"tp": 3,
						"a": "f2",
						"constraint": {
							"sequence": "s2"
						}
					}
				]
			},
			{
				"tp": 1,
				"id": 1,
				"cls": "Fibonacci",
				"a": "f1",
				"constraints": [
					{
						"tp": 5,
						"a": "f1",
						"cls": "Fibonacci"
					},
					{
						"options": {
							"alias": "f1",
							"pattern": "f1.value != -1",
							"scope2": {}
						},
						"tp": 4,
						"a": "f1",
						"constraint": [
							[
								[
									"f1",
									null,
									"identifier"
								],
								[
									"value",
									null,
									"identifier"
								],
								"prop"
							],
							[
								-1,
								null,
								"number"
							],
							"neq"
						]
					},
					{
						"tp": 3,
						"a": "f1",
						"constraint": {
							"sequence": "s1"
						}
					}
				]
			},
			{
				"tp": 6,
				"id": 12,
				"cls": "InitialFact",
				"a": "__i__",
				"constraints": [
					{
						"tp": 5,
						"a": "__i__",
						"cls": "InitialFact"
					},
					{
						"tp": 13,
						"a": "__i__"
					}
				]
			},
			{
				"tp": 1,
				"id": 8,
				"cls": "Fibonacci",
				"a": "f",
				"constraints": [
					{
						"tp": 5,
						"a": "f",
						"cls": "Fibonacci"
					},
					{
						"options": {
							"alias": "f",
							"pattern": "f.value == -1 && (f.sequence == 1 || f.sequence == 2)",
							"scope2": {}
						},
						"tp": 1,
						"a": "f",
						"constraint": [
							[
								[
									"f",
									null,
									"identifier"
								],
								[
									"value",
									null,
									"identifier"
								],
								"prop"
							],
							[
								-1,
								null,
								"number"
							],
							"eq"
						]
					},
					{
						"options": {
							"alias": "f",
							"pattern": "f.value == -1 && (f.sequence == 1 || f.sequence == 2)",
							"scope2": {}
						},
						"tp": 0,
						"a": "f",
						"constraint": [
							[
								[
									[
										[
											"f",
											null,
											"identifier"
										],
										[
											"sequence",
											null,
											"identifier"
										],
										"prop"
									],
									[
										1,
										null,
										"number"
									],
									"eq"
								],
								[
									[
										[
											"f",
											null,
											"identifier"
										],
										[
											"sequence",
											null,
											"identifier"
										],
										"prop"
									],
									[
										2,
										null,
										"number"
									],
									"eq"
								],
								"or"
							],
							null,
							"composite"
						]
					}
				]
			},
			{
				"tp": 6,
				"id": 14,
				"cls": "InitialFact",
				"a": "__i__",
				"constraints": [
					{
						"tp": 5,
						"a": "__i__",
						"cls": "InitialFact"
					},
					{
						"tp": 13,
						"a": "__i__"
					}
				]
			},
			{
				"tp": 1,
				"id": 10,
				"cls": "Fibonacci",
				"a": "f1",
				"constraints": [
					{
						"tp": 5,
						"a": "f1",
						"cls": "Fibonacci"
					},
					{
						"options": {
							"alias": "f1",
							"pattern": "f1.sequence != 1",
							"scope2": {}
						},
						"tp": 4,
						"a": "f1",
						"constraint": [
							[
								[
									"f1",
									null,
									"identifier"
								],
								[
									"sequence",
									null,
									"identifier"
								],
								"prop"
							],
							[
								1,
								null,
								"number"
							],
							"neq"
						]
					}
				]
			},
			{
				"tp": 7,
				"id": 9,
				"cls": "Fibonacci",
				"a": "f",
				"constraints": [
					{
						"tp": 5,
						"a": "f",
						"cls": "Fibonacci"
					},
					{
						"options": {
							"alias": "f",
							"pattern": "f.sequence == 1",
							"scope2": {}
						},
						"tp": 1,
						"a": "f",
						"constraint": [
							[
								[
									"f",
									null,
									"identifier"
								],
								[
									"sequence",
									null,
									"identifier"
								],
								"prop"
							],
							[
								1,
								null,
								"number"
							],
							"eq"
						]
					}
				]
			},
			{
				"tp": 6,
				"id": 16,
				"cls": "InitialFact",
				"a": "__i__",
				"constraints": [
					{
						"tp": 5,
						"a": "__i__",
						"cls": "InitialFact"
					},
					{
						"tp": 13,
						"a": "__i__"
					}
				]
			}
		],
		"ts": [
			0,
			28,
			35
		],
		"tps": [
			2,
			8,
			24
		],
		"bucket": {
			"counter": 0,
			"recency": 0
		}
	}
}